// prisma/schema.prisma - CLEAN VERSION (No Migration Fields)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String?
  image            String?            // Auth0 profile image
  credits          Int                @default(0)
  
  // Stripe integration
  stripeCustomerId String?            @unique
  
  // Welcome bonus tracking
  welcomeBonusGiven Boolean           @default(false)
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  transactions     CreditTransaction[]
  resumes          Resume[]           // Future: resume management
  jobAnalyses      JobAnalysis[]      // Future: job analysis history

  @@map("users")
}

model CreditTransaction {
  id            String   @id @default(cuid())
  userId        String
  delta         Int      // +100 for purchase, -10 for resume analysis, -5 for job match
  reason        String   // "purchase", "welcome_bonus", "resume_analysis", "job_match", "admin_adjustment"
  
  // Stripe integration
  stripeEventId String?  @unique
  
  // Reference to what was analyzed/purchased
  resumeId      String?  // If related to resume analysis
  jobAnalysisId String?  // If related to job matching
  
  metadata      Json?    // Flexible storage for additional data
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

model Price {
  id             String   @id @default(cuid())
  stripePriceId  String   @unique
  name           String   // "Starter", "Pro", "Premium"
  creditsPerUnit Int      // 100, 500, 1000
  priceInCents   Int      // 500, 2000, 3500
  currency       String   @default("eur")
  active         Boolean  @default(true)
  
  // Promotional fields
  isPopular      Boolean  @default(false)
  discount       Int?     // Percentage discount
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("prices")
}

// Future models for Resume Matcher functionality
model Resume {
  id            String   @id @default(cuid())
  userId        String
  filename      String
  contentType   String   // "application/pdf", "application/vnd.openxmlformats..."
  extractedText String   // Raw text from PDF/DOCX
  structuredData Json?   // Parsed resume data (skills, experience, etc.)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses JobAnalysis[]

  @@map("resumes")
}

model JobAnalysis {
  id               String   @id @default(cuid())
  userId           String
  resumeId         String
  jobDescription   String   // Job posting text
  matchScore       Float?   // 0.0 to 1.0 compatibility score
  improvements     Json?    // Suggested improvements
  missingSkills    Json?    // Skills user should add
  
  creditsUsed      Int      @default(5) // Track cost
  
  createdAt        DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  resume Resume @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@map("job_analyses")
}

// Webhook debugging (optional)
model WebhookEvent {
  id              String   @id @default(cuid())
  stripeEventId   String   @unique
  eventType       String
  processed       Boolean  @default(false)
  processingError String?
  metadata        Json?
  
  createdAt       DateTime @default(now())

  @@map("webhook_events")
}
