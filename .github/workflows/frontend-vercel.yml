name: Frontend CI + Deploy (Vercel)

on:
  push:
    branches: [ security-hardening-neon ]
    paths:
      - 'apps/frontend/**'
      - 'apps/frontend/**/*'
      - 'apps/frontend/**/.env*'
      - 'apps/frontend/package.json'
      - 'apps/frontend/package-lock.json'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Type check and build
        run: |
          npm run build --if-present

  deploy:
    name: Deploy to Vercel
    needs: build
    # Only attempt deploy if all Vercel secrets are present
    if: ${{ secrets.VERCEL_TOKEN != '' && secrets.VERCEL_ORG_ID != '' && secrets.VERCEL_PROJECT_ID != '' }}
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    defaults:
      run:
        working-directory: apps/frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Build (Vercel)
        run: vercel build --prod --token "${{ secrets.VERCEL_TOKEN }}"

      - name: Deploy (Vercel)
        run: vercel deploy --prebuilt --prod --token "${{ secrets.VERCEL_TOKEN }}"
