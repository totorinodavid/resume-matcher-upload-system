# Optimierter Stripe Credit System Prompt für Resume Matcher Stack

Erstelle eine vollständige, robuste Implementierung eines Stripe-Credit-Systems
für die **Resume Matcher** Plattform mit Next.js 15 (App Router), Prisma und **PostgreSQL auf Render/Neon**.

## Ziele / Architektur (Resume Matcher spezifisch)
- Nutzer kaufen Credit-Pakete via Stripe Checkout für Resume-Analysen und Job-Matching.
- Nach erfolgreicher Zahlung werden Credits **serverseitig per Stripe Webhook** gutgeschrieben.
- **Ledger-Ansatz**: Jede Änderung an Credits wird in `CreditTransaction` gespeichert; `users.credits_balance` ist abgeleitet.
- **Idempotenz**: Stripe-Event-IDs werden unique gespeichert; kein doppeltes Buchen.
- **Credit-Verbrauch**: Resume-Analysen (-10 Credits), Job-Matching (-5 Credits), Resume-Improvement (-15 Credits).
- **Refunds**: `refund.created` / `charge.refunded` reduziert Credits spiegelbildlich.
- **Sicherheit**: Webhook-Signaturprüfung, Request-Body als RAW/Text, schnelle 2xx-Antwort, PII-redacted logging.
- **Robust für Prod**: PostgreSQL (Neon/Render), Connection Pooling, SSL, Retry/Backoff, Migrations.
- **Integration**: NextAuth v5 Session Management, next-intl Internationalisierung.

## Technologien / Resume Matcher Stack
- **Frontend**: Next.js 15 (App Router), TypeScript strict mode, Tailwind CSS 4, Radix UI primitives
- **Backend**: Next.js API Routes mit nodejs runtime, Prisma ORM
- **Database**: PostgreSQL (Neon/Render) mit pooled connections
- **Payment**: Stripe SDK (apiVersion "2024-06-20") mit webhook signature verification
- **Auth**: NextAuth v5 integration für user session management
- **Internationalization**: next-intl für German/English locale support
- **Monitoring**: Structured logging mit PII redaction, optional Sentry integration

## Verzeichnis & Dateien (Resume Matcher Struktur)
```
apps/frontend/
├── prisma/
│   ├── schema.prisma (PostgreSQL mit Resume Matcher models)
│   └── migrations/
├── lib/
│   ├── prisma.ts (Singleton mit pooled connections)
│   ├── stripe.ts (Stripe client mit error handling)
│   └── utils/
│       ├── credits.ts (Credit calculation utilities)
│       └── redaction.ts (PII redaction for logs)
├── app/
│   ├── api/
│   │   ├── checkout/route.ts (Create Stripe checkout session)
│   │   └── stripe/
│   │       └── webhook/route.ts (Process Stripe events)
│   ├── actions/
│   │   ├── spendCredits.ts (Server Action: Credits verbrauchen)
│   │   └── purchaseCredits.ts (Server Action: Checkout initiieren)
│   ├── [locale]/
│   │   ├── billing/page.tsx (Credits dashboard mit next-intl)
│   │   └── components/
│   │       ├── credit-balance.tsx (Credit display component)
│   │       ├── credit-purchase.tsx (Purchase UI mit Radix)
│   │       └── credit-history.tsx (Transaction history)
│   └── globals.css (Tailwind CSS 4)
├── components/ui/ (Radix UI primitives)
├── messages/ (next-intl translations)
├── .env.example
└── README.md
```

## Prisma Schema (Resume Matcher Integration)
Erweitere das bestehende Schema:

- **User** (bestehend, erweitern)
  - `id` (Int, PK) - **bestehend**
  - `email` (String, unique) - **bestehend**
  - `name` (String) - **bestehend**
  - `stripeCustomerId` (String?, unique) - **neu**
  - `credits_balance` (Int, default 0) - **bestehend/erweitern**
  - `createdAt`, `updatedAt` - **hinzufügen falls fehlt**
  - Relation: `creditTransactions CreditTransaction[]`

- **CreditTransaction** (neu)
  - `id` (BigInt, PK, autoincrement)
  - `userId` (Int, FK → User.id)
  - `delta_credits` (Int) - **Resume Matcher naming convention**
  - `reason` (String: `purchase | refund | resume_analysis | job_match | resume_improvement | manual`)
  - `stripeEventId` (String?, unique)
  - `meta` (Json?, metadata für zusätzliche Infos)
  - `createdAt` (DateTime)
  - Relation: `user User`

- **Price** (neu, für lokale Credit-Mapping)
  - `stripePriceId` (String, PK)
  - `creditsPerUnit` (Int)
  - `priceInCents` (Int) - **für UI display**
  - `currency` (String, default "eur")
  - `active` (Boolean, default true)
  - `createdAt`, `updatedAt`

## Credit-System Datenfluss (Resume Matcher spezifisch)

### 1. Checkout (NextAuth Integration)
```typescript
// Input via Server Action
{ priceId: string, quantity: number, locale: 'en' | 'de' }

// Process:
- Hole user aus NextAuth session
- Erstelle/verwende Stripe Customer mit metadata.userId
- Setze Checkout success_url mit locale: /{locale}/billing?success=true
- Setze cancel_url: /{locale}/billing?canceled=true
- Return: { checkoutUrl: string }
```

### 2. Webhook Processing (Resume Matcher Error Handling)
```typescript
// Events mit Resume Matcher logging:
- checkout.session.completed:
  * User via stripeCustomerId oder email finden/erstellen
  * Credits berechnen aus Stripe metadata.credits oder lokale Price table
  * Atomic DB transaction:
    - Idempotenz check via stripeEventId
    - CreditTransaction(delta_credits=+amount, reason='purchase')
    - User.credits_balance += amount
  * Log success mit redacted user info

- refund.created:
  * Original purchase transaction finden
  * Credits proportional reduzieren
  * CreditTransaction(delta_credits=-amount, reason='refund')
  * User.credits_balance -= amount
```

### 3. Credit Usage (Resume Matcher Features)
```typescript
// Server Actions für verschiedene Features:
- analyzeResume(): -10 credits, reason='resume_analysis'
- matchJob(): -5 credits, reason='job_match'  
- improveResume(): -15 credits, reason='resume_improvement'

// Jede Action:
- Check session/auth
- Atomic transaction: balance check + deduction
- Return success/insufficient_credits error
```

## Production Setup (Render/Neon spezifisch)

### Database Configuration
```typescript
// lib/prisma.ts - Production ready
const DATABASE_URL = process.env.DATABASE_URL!
const DATABASE_POOL_URL = process.env.DATABASE_POOL_URL

// Use pooled connection in production, direct in development
const databaseUrl = process.env.NODE_ENV === 'production' && DATABASE_POOL_URL 
  ? DATABASE_POOL_URL 
  : DATABASE_URL

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: databaseUrl + (databaseUrl.includes('sslmode') ? '' : '?sslmode=require')
    }
  }
})
```

### Environment Variables (Resume Matcher)
```bash
# Database (Render/Neon)
DATABASE_URL="postgresql://user:pass@host:5432/db?sslmode=require"
DATABASE_POOL_URL="postgresql://user:pass@pooler-host:5432/db?sslmode=require&pgbouncer=true"

# Stripe
STRIPE_SECRET_KEY="sk_test_..."
STRIPE_PUBLISHABLE_KEY="pk_test_..."
STRIPE_WEBHOOK_SECRET="whsec_..."

# App
NEXTAUTH_URL="https://your-app.vercel.app"
NEXTAUTH_SECRET="..."
APP_URL="https://your-app.vercel.app"

# Optional: Monitoring
SENTRY_DSN_FRONTEND="..."
```

## Code-Details (Resume Matcher Standards)

### API Routes
```typescript
// Beide routes: export const runtime = 'nodejs'
// Webhook: await req.text() für raw body
// Error responses im Resume Matcher format:
{
  "request_id": "req_123",
  "error": {
    "code": "WEBHOOK_SIGNATURE_INVALID",
    "message": "Invalid signature",
    "detail": null
  }
}
```

### Error Handling & Logging
```typescript
// Resume Matcher custom exceptions
class CreditSystemError extends Error {
  constructor(message: string, public code: string) {
    super(message)
    this.name = 'CreditSystemError'
  }
}

// PII-safe logging
import { redact } from '@/lib/utils/redaction'
logger.info(`Credits added for user: ${redact(user.email)}`)
```

### Internationalization Integration
```typescript
// Credit purchase UI mit next-intl
const t = useTranslations('Credits')

// Messages structure:
{
  "Credits": {
    "balance": "Current Balance: {credits} Credits",
    "purchase": "Purchase Credits",
    "packages": {
      "starter": "Starter Pack - 100 Credits",
      "pro": "Pro Pack - 500 Credits", 
      "premium": "Premium Pack - 1000 Credits"
    },
    "usage": {
      "resume_analysis": "Resume Analysis (-10 Credits)",
      "job_match": "Job Matching (-5 Credits)",
      "resume_improvement": "Resume Improvement (-15 Credits)"
    }
  }
}
```

## Credit Packages (Resume Matcher)
```typescript
// Empfohlene Credit-Pakete für Resume Features:
const CREDIT_PACKAGES = [
  {
    stripePriceId: 'price_starter',
    name: 'Starter Pack',
    credits: 100,
    priceInCents: 500, // €5.00
    description: '10 resume analyses or 20 job matches'
  },
  {
    stripePriceId: 'price_pro', 
    name: 'Pro Pack',
    credits: 500,
    priceInCents: 2000, // €20.00
    description: '50 resume analyses + improvements'
  },
  {
    stripePriceId: 'price_premium',
    name: 'Premium Pack', 
    credits: 1200,
    priceInCents: 3500, // €35.00 (Best Value)
    description: 'Everything included with 20% bonus'
  }
]
```

## Testing & Development (Resume Matcher Workflow)

### Local Development Setup
```bash
# 1. Install dependencies
npm install @stripe/stripe-js stripe prisma @prisma/client next-auth next-intl

# 2. Database setup
npx prisma generate
npx prisma migrate dev --name init

# 3. Stripe products/prices setup
stripe products create --name "Resume Matcher Credits" --metadata.type="credits"
stripe prices create --product=prod_xxx --unit-amount=500 --currency=eur --metadata.credits=100

# 4. Webhook testing
stripe listen --forward-to localhost:3000/api/stripe/webhook

# 5. Test checkout
curl -X POST http://localhost:3000/api/checkout \
  -H "Content-Type: application/json" \
  -d '{"priceId":"price_xxx","quantity":1}'
```

### Production Deployment (Render/Vercel)
```bash
# 1. Database migration (gegen unpooled URL)
DATABASE_URL="postgresql://..." npx prisma migrate deploy

# 2. Set environment variables in Render/Vercel
# 3. Configure Stripe webhook endpoint in dashboard
# 4. Test with production webhook secret
```

## Resume Matcher Integration Points

### Credit Balance Display
```tsx
// Component zeigt Credits mit Resume-spezifischen Actions
<div className="bg-gray-900/70 backdrop-blur-sm p-6 rounded-lg">
  <CreditBalance 
    credits={user.credits_balance}
    locale={locale}
  />
  <div className="mt-4 space-y-2">
    <FeatureCost 
      feature="resume_analysis" 
      cost={10}
      description={t('Credits.usage.resume_analysis')}
    />
    <FeatureCost 
      feature="job_match" 
      cost={5}
      description={t('Credits.usage.job_match')}
    />
  </div>
</div>
```

### Credit-gated Features
```typescript
// Resume analysis mit Credit-Check
export async function analyzeResume(resumeId: string) {
  const session = await auth()
  if (!session?.user?.id) throw new Error('Unauthorized')
  
  // Check and deduct credits
  const success = await spendCredits({
    userId: session.user.id,
    amount: 10,
    reason: 'resume_analysis',
    metadata: { resumeId }
  })
  
  if (!success) {
    throw new CreditSystemError('Insufficient credits', 'INSUFFICIENT_CREDITS')
  }
  
  // Proceed with analysis...
}
```

Bitte liefere vollständige, produktionstaugliche Implementierung aller Komponenten mit:
- Resume Matcher naming conventions und error handling
- NextAuth v5 integration für user management  
- next-intl für internationalization
- Radix UI + Tailwind CSS 4 für UI components
- Structured logging mit PII redaction
- PostgreSQL optimiert für Render/Neon deployment
- Comprehensive testing setup mit Stripe CLI integration

Das Ziel ist eine nahtlose Integration in die bestehende Resume Matcher Architektur mit production-ready credit system.
